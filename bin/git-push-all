#!/usr/bin/perl

# git-push-all -- intelligently push most branches

# Copyright (C) 2016 Sean Whitton
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prerequisites:

# The Git::Wrapper, Config::GitLike, and List::MoreUtils perl
# libraries.  On a Debian system,
#     apt-get install libgit-wrapper-perl libconfig-gitlike-perl \
#         liblist-moreutils-perl

# Description:

# This script will try to push all your branches to the places they
# should be pushed, with --follow-tags.  Specifically, for each branch,
#
# 1. If branch.pushRemote is set, push it there
#
# 2. Otherwise, if remote.pushDefault is set, push it there
#
# 3. Otherwise, if it is tracking a remote branch, push it there
#
# 4. Otherwise, exit non-zero.
#
# If a branch is tracking a remote that you cannot push to, be sure to
# set at least one of branch.pushRemote and remote.pushDefault.

use strict;
use warnings;

use Git::Wrapper;
use Config::GitLike;
use List::MoreUtils qw{ uniq };

my $git = Git::Wrapper->new(".");
my $config = Config::GitLike->new( confname => 'config' );
$config->load_file('.git/config');

my @branches = $git->branch;
my $pushDefault = $config->get( key => "remote.pushDefault" );

foreach my $branch ( @branches ) {
    $branch =~ s/[ \*]//g;
    my $pushRemote = $config->get( key => "branch.$branch.pushRemote" );
    my $tracking = $config->get( key => "branch.$branch.remote" );

    if ( defined $pushRemote ) {
        print ">> pushing $branch to $pushRemote (its pushRemote)\n";
        system "git push --follow-tags $pushRemote $branch";
        exit 1 if ( $? != 0 );
    } elsif ( defined $pushDefault ) {
        print ">> pushing $branch to $pushDefault (the remote.pushDefault)\n";
        system "git push --follow-tags $pushDefault $branch";
        exit 1 if ( $? != 0 );
    } elsif ( defined "$tracking" ) {
        print ">> pushing $branch to $tracking (probably to its tracking branch)\n";
        system "git push --follow-tags $tracking $branch";
        exit 1 if ( $? != 0 );
    } else {
        die "couldn't find anywhere to push $branch";
    }
}
