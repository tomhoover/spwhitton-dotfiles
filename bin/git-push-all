#!/usr/bin/perl

# git-push-all -- intelligently push most branches

# Copyright (C) 2016 Sean Whitton
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prerequisites:

# The Git::Wrapper, Array::Utils, Config::GitLike, and List::MoreUtils
# perl libraries.  On a Debian system,
#     apt-get install libgit-wrapper-perl libconfig-gitlike-perl \
#         liblist-moreutils-perl libarray-utils-perl

# Description:

# This script will try to push all your branches to the places they
# should be pushed, with --follow-tags.  Specifically, for each branch,
#
# 1. If branch.pushRemote is set, push it there
#
# 2. Otherwise, if remote.pushDefault is set, push it there
#
# 3. Otherwise, if it is tracking a remote branch, push it there
#
# 4. Otherwise, exit non-zero.
#
# If a branch is tracking a remote that you cannot push to, be sure to
# set at least one of branch.pushRemote and remote.pushDefault.

use strict;
use warnings;
no warnings "experimental::smartmatch";

use Array::Utils qw{ array_minus };
use Git::Wrapper;
use Config::GitLike;
use List::MoreUtils qw{ uniq apply };

my $git = Git::Wrapper->new(".");
my $config = Config::GitLike->new( confname => 'config' );
$config->load_file('.git/config');

my @branches = apply { s/[ \*]//g } $git->branch;
my @allBranches = apply { s/[ \*]//g } $git->branch({ all => 1 });
my $pushDefault = $config->get( key => "remote.pushDefault" );

my %pushes;

foreach my $branch ( @branches ) {
    my $pushRemote = $config->get( key => "branch.$branch.pushRemote" );
    my $tracking = $config->get( key => "branch.$branch.remote" );

    if ( defined $pushRemote ) {
        # print "I: pushing $branch to $pushRemote (its pushRemote)\n";
        push @{ $pushes{$pushRemote} }, $branch;
    # don't push unless it already exists on the remote: this script
    # avoids creating branches
    } elsif ( defined $pushDefault
              && "remotes/$pushDefault/$branch" ~~ @allBranches ) {
        # print "I: pushing $branch to $pushDefault (the remote.pushDefault)\n";
        push @{ $pushes{$pushDefault} }, $branch;
    } elsif ( !defined $pushDefault && defined $tracking
              && "remotes/$tracking/$branch" ~~ @allBranches ) {
        # print "I: pushing $branch to $tracking (probably to its tracking branch)\n";
        push @{ $pushes{$tracking} }, $branch;
    } else {
        die "E: couldn't find anywhere to push $branch";
    }
}

foreach my $remote ( keys %pushes ) {
    # TODO if $remote eq $pushDefault, consider s/follow-// below (and
    # pushRemote of master branch, if that exists?)
    # I almost certainly want all tags on that remote (e.g. an alioth repo)
    my @branches = @{ $pushes{$remote} };
    if ( "--no-verify" ~~ @ARGV ) {
        system "git push --follow-tags --no-verify $remote @branches";
    } else {
        system "git push --follow-tags $remote @branches";
    }
    exit 1 if ( $? != 0 );
}

# Now find any tags that have not been pushed to any remote.
# --follow-tags should avoid this, but sometimes tags fall through the
# gaps.  It will also catch unannotated tags, since --follow-tags
# ignores those, and I probably don't want them

# TODO if this turns out to be slow, split out into a script run
# weekly as part of ~/bin/sysmaint

# TODO definitely split out because should be run as a safety catch by
# src-unregistered

unless ( "--no-tags" ~~ @ARGV ) {
    my @tags = grep { !(m|archive/debian/\S+|) } $git->tag;
    my @remotes = $git->remote;
    my @pushed_tags;

    foreach my $remote ( @remotes ) {
        unless ( $remote eq "dgit" ) {
            my @this_remote_tags = apply { s|\^\{\}$||; s|[a-f0-9]+\trefs/tags/|| }
              $git->ls_remote( { tags => 1 }, $remote );
            push @pushed_tags, @this_remote_tags;
        }
    }

    @pushed_tags = uniq @pushed_tags;
    my @unpushed_tags = array_minus ( @tags, @pushed_tags );

    if ( scalar @unpushed_tags > 0 ) {
        print "E: the following tags have not been pushed to any remote:\n";
        print join(", ", @unpushed_tags);
        print "\n";
        exit 1;
    }
}
