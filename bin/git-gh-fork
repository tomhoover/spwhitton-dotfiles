#!/usr/bin/perl

# git-gh-fork --- Create tidy GitHub forks for pull requests
#
# Copyright (C) 2017  Sean Whitton
#
# git-gh-fork is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# git-gh-fork is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with git-gh-fork.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use lib "$ENV{HOME}/lib/perl5";
no warnings "experimental::smartmatch";

use Data::Dumper;

use Net::GitHub;
use Git::Wrapper;
use Config::GitLike;
use Term::UI;
use Term::ReadLine;
use File::XDG;
use File::Temp qw/tempdir/;
use File::chdir;
use Path::Class;
use Sys::Hostname;
use autodie; # die if problem reading or writing a file

my $xdg = File::XDG->new(name => 'net-github');
my $term = Term::ReadLine->new('brand');

my $cache_dir = $xdg->cache_home();
my $oauth_token_file = $cache_dir->file("oauth_token");
my $oauth_token;
if (-f "$oauth_token_file") {
    $oauth_token = $oauth_token_file->slurp();
    chomp $oauth_token;
} else {
    $oauth_token = get_new_oauth_token();
}

my $github = Net::GitHub->new(access_token => $oauth_token);
my $repos = $github->repos;
my $github_user = $github->user;
my $user = $github_user->show()->{'login'};
my $git = Git::Wrapper->new(".");
my $config = Config::GitLike->new( confname => 'config' );
$config->load_file('.git/config');

# TODO check all remotes, not just origin
# TODO resolve the URI, taking account of insteadOf and pushInsteadOf
# in ~/.gitconfig, and then then match against the URIs github accepts
my $origin_url = $config->get(key => "remote.origin.url");
$origin_url =~ m|([a-zA-Z0-9]+)/(.*)(?:\.git)?/?$|;
my $org = $1;
my $repo = $2;
my $prompt = "Do you want to submit a PR from $user against repo $repo belonging to $org?";
my $confirm = $term->ask_yn(prompt => $prompt, default => 'y',);
die "looks like I need a better regexp" unless $confirm;

unless (fork_exists()) {
    $repos->create_fork($org, $repo);
    until (fork_exists()) {
        print "Waiting for fork to be created ...\n";
        sleep 5;
    }
}
$repos->set_default_user_repo($user, $repo);
my $fork = $repos->get();

my @branches = $repos->branches;
unless (grep { $_->{name} eq "github" } @branches) {
    my $worktree = dir(tempdir());
    my $readme = $worktree->file("README.md");
    system "git worktree add --detach $worktree";
    {
        local $CWD = $worktree;
        system "git checkout --orphan github";
        system "git rm -rf .";
        my $fh = $readme->openw();
        $fh->print("This repository is just a fork made in order to submit a pull request");
        close $fh;
        system "git add README.md";
        system "git commit -m 'fork for a pull request'";
    }
    $worktree->rmtree();
    system "git worktree prune";

    system "git remote add -f fork $fork->{html_url}";
    system "git push fork +github";
    system "git branch -D github";
    $repos->update({
                    name => "$repo",
                    has_wiki => 0,
                    homepage => "",
                    description => "Temporary fork for a pull request",
                    has_issues => 0,
                    has_downloads => 0,
                    default_branch => "github",
                   });

    my $branches = "";
    for my $branch (@branches) {
        unless ($branch->{name} eq "github") {
            $branches .= " :$branch->{name}";
        }
    }
    system "git push fork $branches";
}

sub get_new_oauth_token {
    $cache_dir->mkpath();
    my $user = $term->get_reply(prompt => 'GitHub username');
    my $pass = $term->get_reply(prompt => 'GitHub password');
    my $github = Net::GitHub::V3->new( login => "$user", pass => "$pass" );
    my $oauth = $github->oauth;
    # TODO this will fail if a token has already been created on this
    # host -- we should be able to re-use it
    my $o = $oauth->create_authorization({scopes => ['repo'], note => 'git gh-fork@' . hostname});
    my $oauth_token_file_handle = $oauth_token_file->openw();
    $oauth_token_file_handle->print($o->{token} . "\n");
    return $o->{token}
}

sub fork_exists {
    my @user_repos = $repos->list_user($user);
    return grep { $_->{name} eq $repo } @user_repos;
}
