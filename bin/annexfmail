#!/bin/bash

. $HOME/.shenv
. $HOME/lib/tputfs.sh

set -e

# 1. turn off mbsync for a bit

if pgrep mbsync >/dev/null; then
    echo "annexfmail: mbsync is running so I can't disable it" >&2
    exit 1
fi

mbsync --quiet fastmail
mv "$HOME/.mbsyncrc" "$HOME/.mbsyncrc~"

# 2. set constants

OUTPUT=$HOME/lib/annex/doc/mail
INPUT=$HOME/.fmail

# set the archive suffix ourselves because we don't want the archive
# ending with -jan-2014 to be added to after the end of January, so
# that it may be safely archived into the annex
suffix=$(date +-%b-%Y | sed 's/\(.*\)/\L\1/')

# 3. safety check to be sure we don't overwrite anything

if [ -e "$OUTPUT/archive${suffix}.gz" ] || [ -e "$OUTPUT/sent${suffix}.gz" ]; then
    echo "annexfmail: looks like you've already made an archive recently" >&2
    echo "annexfmail: to avoid issues with git-annex, wait until next month"
    exit 1
fi

# 4. now do the archiving run

archivemail \
    --days=31 \
    --output-dir=$OUTPUT \
    --preserve-unread \
    --archive-name=archive${suffix} \
    $INPUT/inbox

archivemail \
    --days=31 \
    --output-dir=$OUTPUT \
    --preserve-unread \
    --archive-name=sent${suffix} \
    $INPUT/sent

archivemail \
    --days=31 \
    --output-dir=$OUTPUT \
    --preserve-unread \
    --archive-name=feeds${suffix} \
    $INPUT/feeds

archivemail \
    --days=31 \
    --output-dir=$OUTPUT \
    --preserve-unread \
    --archive-name=debian${suffix} \
    $INPUT/debian

cd $OUTPUT
git annex add archive${suffix}.gz sent${suffix}.gz debian${suffix}.gz feeds${suffix}.gz

mv "$HOME/.mbsyncrc~" "$HOME/.mbsyncrc"

status now commit and sync ~/lib/annex
