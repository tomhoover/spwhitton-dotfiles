#!/usr/bin/perl

# Script to remove repositories in ~/src, including removing their
# entries from ~/src/.mrconfig.  Confirmation is required only if the
# repository has uncommitted changes, untracked files or unpushed
# branches

# For convenient tab-completion of the repository names, run this
# script from ~/src

use warnings;
use strict;

use Capture::Tiny 'tee_stdout';
use Term::UI;
use Tie::File;

die "need at least one argument" if ( @ARGV < 1 );
chdir "$ENV{'HOME'}/src/";
my $term = Term::ReadLine->new('brand');

foreach my $repo ( @ARGV ) {
    die "$repo does not exist" if ! ( -d $repo );
    die "$repo is not a git or hg repo"
      if ! ( -d "$repo/.git" || -d "$repo/.hg" );
}

# we rely on calling `mr status` so ensure the repo is registered
system "src-register-all";

foreach my $repo ( @ARGV ) {
    (my $output, undef) = tee_stdout { system "mr -m -d $repo status" };
    my $confirm = 1;
    if (length($output)) {
        $confirm = $term->ask_yn(
                                 prompt => 'Delete unclean repo $repo?',
                                 default => 'n',
                                );
    }
    if ($confirm) {
        my $in_block = 0;
        tie my @lines, 'Tie::File', "$ENV{'HOME'}/src/.mrconfig"
          or die "could not open ~/src/.mrconfig";
        for (my $i = 0; $i < @lines; $i++) {
            if ($lines[$i] =~ m/^\[(.*)\]$/) {
                if ($1 eq $repo) {
                    $in_block = 1;
                } else {
                    $in_block = 0;
                }
            }
            if ($in_block) {
                splice @lines, $i, 1;
                $i--;
            }
        }
        untie @lines;
        system "rm -rf $repo ${repo}_*.orig.tar.*";
    }
}
