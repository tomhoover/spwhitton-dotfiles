#!/usr/bin/perl

# git-deborig -- try to produce Debian orig.tar using git-archive(1)

# Copyright (C) 2016  Sean Whitton <spwhitton@spwhitton.name>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Prerequisites:

# apt-get install libparse-debianchangelog-perl libgit-wrapper-perl \
#     libdpkg-perl liblist-compare-perl

use strict;
use warnings;
no warnings "experimental::smartmatch";

use Parse::DebianChangelog;
use Git::Wrapper;
use Dpkg::Version;
use List::Compare;

die "pwd doesn't look like a Debian source package in a git repository ..\n"
  unless ( -d ".git" && -e "debian/changelog" );

die "usage: git deborig [-f] [TAG]\n" unless ( scalar @ARGV < 3);

# Extract source package name and version from d/changelog
my $changelog = Parse::DebianChangelog->init();
$changelog->parse( { infile => "debian/changelog" } );
my $changelog_data = $changelog->dpkg();
my $version = Dpkg::Version->new($changelog_data->{"Version"});
my $upstream_version = $version->version();
my $source = $changelog_data->{"Source"};

# TODO gz for source package version 1
# TODO handle -f
# TODO pipe to xz or gz in case git config not in place
my $orig = "../${source}_$upstream_version.tar.xz";
die "orig.tar already exists: not overwriting without -f"
  if ( -e "$orig" );

# Get available git tags
my $git = Git::Wrapper->new(".");
my @all_tags = $git->tag();

if ( scalar @ARGV > 0 ) {
    my $user_tag = shift @ARGV;
    if ( $user_tag ~~ @all_tags ) {
        $git->archive("-o$orig", "$user_tag");
    } else {
        die "the tag $user_tag does not exist in this repository\n";
    }
} else {
    # See which candidate version tags are present in the repo
    my @candidate_tags = ("$upstream_version",
                          "v$upstream_version",
                          "upstream/$upstream_version"
                         );
    my $lc = List::Compare->new(\@all_tags, \@candidate_tags);
    my @version_tags = $lc->get_intersection();

    if ( scalar @version_tags > 1 ) {
        print "tags ", join(", ", @version_tags), " all exist in this repository\n";
        print "tell me which one you want to make an orig.tar from: git deborig TAG\n";
        exit 1;
    } else {
        my $tag = shift @version_tags;
        $git->archive("-o$orig", "$tag");
    }
}
