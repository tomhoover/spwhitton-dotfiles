# -*- mode: sh -*-

# --- global settings

[DEFAULT]
git_gc = git gc "$@"
jobs = 5

# In general, I don't want merge commits to be made en masse by mr
git_update = git pull --ff-only "$@"

# --- Adam Spiers' plugin for managing dotfile symlinks with mr

include =
    if [ -e ~/lib/mr/stow ]; then
        cat ~/lib/mr/stow
    elif [ -e ~/local/lib/stow ]; then
        cat ~/local/lib/stow
    fi
lib =
    # reimplement kitenet-mr stow library function which relies on mr
    # "-r" parameter which is only present in aspiers' outdated fork
    is_stowable () {
            [ -z "$MR_DISABLE_STOW" ] &&
            ( mr stowable >/dev/null 2>&1 )
    }

# --- joeyh's code for specifying what machine we're on for repo skip
# --- tests, plus my code for detecting Git-on-Windows

lib =
    win32() {
        if [ "$(perl -e 'print $^O')" = "msys" ]; then
            return 0
        else
            return 1
        fi
    }
    if win32; then
       hostname=$(hostname)
    else
       hostname=$(hostname -s)
    fi
    whoami="$(whoami)"
    # cut off the machine name from whoami on Windows
    if win32; then
        whoami=${whoami##*\\}
    fi
    on() {
        for host in $@; do
            if [ "${host%@*}" != "${host#*@}" ]; then
                if [ "$whoami" != "${host%@*}" ]; then
                    continue
                fi
                host="${host#*@}"
            fi
            if [ "$hostname" = "$host" ]; then
                return 0
            fi
        done
        return 1
    }
    mine() {
        on swhitton@artemis || on swhitton@zephyr || on swhitton@SPWHITTON
    }

# --- primary dotfiles repository

[src/dotfiles]
lib =
        # manually set a variable that aspiers' outdated fork of mr
        # sets, that his kitenet-mr stow library needs
        MR_NAME=dotfiles

stowable = true
checkout = git clone http://spw.sdf.org/git/dotfiles.git dotfiles
update =
    # always make a go of updating master
    branch="$(git rev-parse --abbrev-ref HEAD)"
    git checkout master
    git pull --ff-only
    git checkout $branch
rebase =
    # common rebasing patterns
    branch="$(git rev-parse --abbrev-ref HEAD)"
    if [ "$branch" = "win32" ]; then
        git checkout win32
        git rebase master
    elif [ "$branch" = "artemis" ]; then
        git checkout workstation
        git rebase master
        git checkout artemis
        git rebase workstation
    # fallback elif to still do something automatic in the simplest case
    elif [ "$branch" = "$hostname" ]; then
        # determine nearest parent branch by
        # https://stackoverflow.com/questions/3161204/find-the-parent-branch-of-a-branch#comment35666518_17843908
        parent="$(git show-branch -a | grep '*' | egrep -v "\[${branch}[0-9^~]*\]" | head -n1 | sed 's/.*\[\(.*\)\].*/\1/' | sed 's/[\^~].*//')"
        if [ "$parent" = "master" ]; then
            git checkout $branch
            git rebase master
        fi
    fi

# skip this repository if stow is not installed, and we're not on
# Windows where we don't use stow.  This should be a prompt to
# download a tarball, and do
#       ./configure --prefix=$HOME/local && make install
skip = ! which stow >/dev/null && ! win32

# stow won't overwrite a real ~/.mrconfig with a symlink to the
# version in my dotfiles repository.  Cannot just delete .mrconfig
# before a stow, because then mr can't tell stow what to do.  So just
# do it with manual fixup and have stow ignore this file.  Name is
# different to avoid mr trying to chain load it at any point

# similarly for .stow-global-ignore
fixups =
    if ! win32; then
        ln -sf ~/src/dotfiles/home-mrconfig ~/.mrconfig
        ln -sf ~/src/dotfiles/.stow-global-ignore ~
        mkdir -p ~/.mutt-tmp
    fi
    # we don't want git doing any automated merges of master.  mr is
    # configured not to do this (see redefinition of git_update at top
    # of this file) but I often run git pull in this repo myself
    git config branch.master.rebase true

# create ~/.emacs.d/ before stowing so that the files inside are
# symlinks, rather than the whole dir.  That way Emacs junk that gets
# dumped in ~/.emacs.d doesn't have to be put into .gitignore
pre_stow = mkdir -p ~/.emacs.d

# GTK insists on replacing the symlink to its bookmarks file with the
# actual file even if the bookmarks in that file don't change (XFCE
# only replaces symlinks to its config files if its changed them).
# Fix this situation in the simplest case to avoid mr restow giving an
# error.  Don't try anything fancy if the files are different; let the
# restow command give an error and the user fix it.
lib =
    fix_gtk_bookmarks () {
        if ! [ -l ~/.gtk-bookmarks ]; then
            # file in home directory is not a link
            if diff -q ~/src/dotfiles/.gtk-bookmarks ~/.gtk-bookmarks > /dev/null; then

                rm ~/.gtk-bookmarks
            fi
        fi
    }
pre_unstow = fix_gtk_bookmarks
pre_restow = fix_gtk_bookmarks

# --- private dotfiles repository

[src/priv]
lib =
        # manually set a variable that aspiers' outdated fork of mr
        # sets, that his kitenet-mr stow library needs
        MR_NAME=priv
stowable = true
checkout = git clone gcrypt::ssh://ma/~/local/git/priv.git priv

# this repository can't be checked out until we install
# git-remote-gcrypt
skip = ! which git-remote-gcrypt >/dev/null 2>/dev/null

# convenience automatic permission setting and checking in of
# frequently changed files
fixups = chmod 600 .passwddb.pet .s3ql/authinfo2
pre_update =
           git add .passwddb.pet .labbook.gpg
           git commit -a -m "auto passwddb and labbook commit on $(hostname -s)" || true
autoci =
       git add .passwddb.pet .labbook.gpg
       git commit -a -m "auto passwddb and labbook commit on $(hostname -s)" || true

# --- primary git annex

[lib/annex]
checkout = git clone 'gcrypt::ssh://ma/~/local/git/lib.annex.git' 'annex'
post_update = git annex merge

# this repository can't be checked out until we install
# git-remote-gcrypt
skip = ! which git-remote-gcrypt >/dev/null 2>/dev/null

# --- source code repositories registered to their own mr config file,
# --- and create my standard home directory subdirectories

[src]
update = mkdir -p $HOME/tmp $HOME/src $HOME/local/src $HOME/local/bin $HOME/local/lib $HOME/local/pub
checkout = mkdir -p $HOME/tmp $HOME/src $HOME/local/src $HOME/local/bin $HOME/local/lib $HOME/local/pub
status = :
push = :
commit = :
autoci = :
rebase = :
chain = true

# --- my personal documents, website and blog.  Override my global
# --- update command back to the myrepos default so that git
# --- automatically pulls and merges.  Skipped on non-local hosts

[doc]
order = 4
checkout = git clone 'ssh://ma/~/local/git/doc.git' 'doc'
update = git pull "$@"
skip = ! ( mine || on spw@ma )

# set file modification times to last commit
fixups = git-utime

# automatically commit in the same way that my cron job does before pulling
pre_update = if ! win32; then doccheckin; fi
# ... and let me do it manually
autoci = doccheckin

# after pulling, update the online copy of my Org-mode agenda
# currently disabled because it's slow and with a computer at work I've not been checking this online copy
# post_update = echo -n "Updating web calendar... ";emacs -batch -l ~/.emacs.d/init.el -eval "(org-batch-store-agenda-views)" >/dev/null 2>/dev/null;echo "hopefully done."

[doc/www]
order = 5
checkout = git clone 'ssh://ma/~/local/git/doc.www.git' 'www'
update = git pull "$@"
skip = ! mine || win32

[doc/www/blog]
order = 6
checkout = git clone 'ssh://ma/~/local/git/doc.www.blog.git' 'blog'
update = git pull "$@"
skip = ! mine || win32

# --- backup to portable HDD if plugged in

[local]
checkout = :
update = :
commit = :
status = :
push = for dir in /media/m3/git/*; do cd $dir; echo \> $(basename $dir):; git pull; done; sudo /root/local/bin/duply $(hostname -s)-seven backup
skip = win32 || (! mount | grep -q "on /media/m3 type ext4")

# do this one last since it is pulling from the same source pushed to
# (due to weird errors when pulling across filesystem)
# (this reasoning irrelevant now we have wheezy's version of git)
order = 27
